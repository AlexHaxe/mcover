{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ex",
				"executionTime:Float"
			],
			[
				"ent",
				"entryTime"
			],
			[
				"LogR",
				"LogRecording"
			],
			[
				"defa",
				"defaultClient"
			],
			[
				"compl",
				"completionHandler"
			],
			[
				"com",
				"completionHandler"
			],
			[
				"Pack",
				"PackageHelper"
			],
			[
				"class",
				"classPaths"
			],
			[
				"funct",
				"functionLogMacro"
			],
			[
				"Fun",
				"FunctionLoggerUtil"
			],
			[
				"p",
				"parseFields"
			],
			[
				"entry",
				"entryLogs"
			],
			[
				"inc",
				"includeCoverage"
			],
			[
				"include",
				"includeLogging"
			],
			[
				"ma",
				"matches"
			],
			[
				"macro",
				"macrotools"
			],
			[
				"pr",
				"Print"
			],
			[
				"meth",
				"methodName"
			],
			[
				"Func",
				"src.massive.mcover.FunctionLogger.FunctionLogRecord"
			],
			[
				"exp",
				"exprStack"
			],
			[
				"currentM",
				"currentMethodName"
			],
			[
				"method",
				"methodCallStackDepth"
			],
			[
				"exter",
				"externalInterfaceTimer"
			],
			[
				"time",
				"timedOut"
			],
			[
				"Asy",
				"AsyncTestClassStub"
			],
			[
				"x",
				"extends"
			],
			[
				"y",
				"y"
			],
			[
				"Ver",
				"VerticalLayout"
			],
			[
				"Ass",
				"AssetDisplay"
			],
			[
				"devices",
				"devices"
			],
			[
				"raxe_",
				"raxe_version"
			],
			[
				"arg",
				"args"
			],
			[
				"File",
				"File"
			],
			[
				"ActionButton",
				"ActionButton"
			],
			[
				"push",
				"push"
			],
			[
				"data",
				"data"
			],
			[
				"right",
				"paddingRight"
			],
			[
				"all",
				"VerticalLayout"
			],
			[
				"HomeScreenView",
				"HomeScreenView"
			],
			[
				"Collection",
				"Collection"
			],
			[
				"Coll",
				"collection"
			],
			[
				"dis",
				"dispatch"
			],
			[
				"Signa",
				"Signal1"
			],
			[
				"Timer",
				"Timer"
			],
			[
				"timeout",
				"timeout"
			],
			[
				"timout",
				"notificationTimeout"
			],
			[
				"text",
				"Text"
			],
			[
				"Stack",
				"Stack"
			],
			[
				"SI",
				"Signal1"
			],
			[
				"Si",
				"Signal0"
			],
			[
				"sec",
				"secondary"
			],
			[
				"height",
				"height"
			],
			[
				"width",
				"width"
			],
			[
				"bo",
				"bottom"
			],
			[
				"left",
				"left"
			],
			[
				"enabled",
				"enabled"
			],
			[
				"Log",
				"log"
			],
			[
				"Over",
				"Overlay"
			],
			[
				"Noti",
				"Notification"
			],
			[
				"de",
				"destroy"
			],
			[
				"remo",
				"removeAll"
			],
			[
				"Sig",
				"Signal0"
			],
			[
				"add",
				"addComponentAt"
			],
			[
				"set_",
				"set_selectedIndex"
			],
			[
				"Focus",
				"Focus"
			],
			[
				"Component",
				"Component"
			],
			[
				"enaled",
				"enabled"
			],
			[
				"Image",
				"Image"
			],
			[
				"ve",
				"VerticalLayout"
			],
			[
				"In",
				"Input"
			],
			[
				"color",
				"color"
			],
			[
				"Button",
				"Button"
			],
			[
				"string",
				"String"
			],
			[
				"Md5",
				"md5"
			],
			[
				"id",
				"id"
			],
			[
				"sta",
				"stamp"
			],
			[
				"Str",
				"StringLoader"
			],
			[
				"lo",
				"loader"
			],
			[
				"Loader",
				"loaderFailed"
			],
			[
				"min",
				"minification"
			],
			[
				"version",
				"version"
			],
			[
				"re",
				"removeAll"
			],
			[
				"5",
				"5"
			],
			[
				"ce",
				"centerX"
			],
			[
				"li",
				"library"
			],
			[
				"url",
				"url"
			],
			[
				"value",
				"value"
			],
			[
				"disp",
				"dispatch"
			],
			[
				"message",
				"message"
			],
			[
				"injec",
				"inject"
			],
			[
				"di",
				"dispatch"
			],
			[
				"Signal",
				"Signal0"
			],
			[
				"title",
				"title"
			],
			[
				"PhasedCommand",
				"PhasedCommand"
			],
			[
				"0",
				"0"
			],
			[
				"action",
				"action"
			],
			[
				"setC",
				"setCwd"
			],
			[
				"incl",
				"printClient"
			],
			[
				"max",
				"maxBlockExecutionListSize"
			],
			[
				"background",
				"background: background-image: url"
			],
			[
				"classP",
				"classPercentage"
			],
			[
				"backgro",
				"background: background-image: url"
			],
			[
				"script",
				"script"
			],
			[
				"div",
				"div"
			],
			[
				"coverage",
				"coverage"
			],
			[
				"allClasses",
				"allClasses"
			],
			[
				"allC",
				"allClasses"
			],
			[
				"in",
				"initialized"
			],
			[
				"Date",
				"loadGeneratedCoverageData"
			],
			[
				"lambda",
				"Lambda"
			],
			[
				"po",
				"posInfos"
			],
			[
				"s",
				"suites"
			],
			[
				"er",
				"error"
			],
			[
				"Lib",
				"Lib"
			],
			[
				"Re",
				"Resource"
			],
			[
				"DEF",
				"DEFAULT_CLIENT"
			],
			[
				"layou",
				"layou"
			],
			[
				"layout",
				"massive.layout.Layout"
			],
			[
				"iter",
				"iterator"
			],
			[
				"Assert",
				"Assert"
			],
			[
				"screen",
				"massive.event.Screen"
			],
			[
				"cap",
				"capture"
			],
			[
				"key",
				"xmpp.PacketType"
			],
			[
				"catalogueView",
				"massive.tv.view.catalogue.CatalogueView"
			],
			[
				"label",
				"label"
			],
			[
				"font",
				"font: font: size font"
			],
			[
				"String",
				"String"
			],
			[
				"selected",
				"selected"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/MassiveSublime/haxe.sublime-build",
	"command_palette":
	{
		"height": 47.0,
		"selected_items":
		[
			[
				"haxe",
				"Set Syntax: haxe"
			],
			[
				"pac",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Discover Packages"
			],
			[
				"Package Control: li",
				"Package Control: List Packages"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 316.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/ws/MassiveCover/src/mcover/coverage/AllClasses.hx",
		"/ws/MassiveCover/src/mcover/coverage/client/EMMAPrintClient.hx",
		"/ws/MassiveCover/src/mcover/coverage/client/PrintClient.hx",
		"/ws/MassiveCover/src/mcover/coverage/client/TraceClient.hx",
		"/ws/MassiveCover/src/mcover/coverage/CoverageLogger.hx",
		"/ws/MassiveCover/src/mcover/coverage/CoverageReportClient.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/AbstractBlock.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/AbstractNode.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/AbstractNodeList.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/Branch.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/Clazz.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/Coverage.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/CoverageResult.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/DataUtil.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/File.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/Line.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/Method.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/Package.hx",
		"/ws/MassiveCover/src/mcover/coverage/data/Statement.hx",
		"/ws/MassiveCover/src/mcover/coverage/Exception.hx",
		"/ws/MassiveCover/src/mcover/coverage/macro/CoverClassMacro.hx",
		"/ws/MassiveCover/src/mcover/coverage/MCover.hx",
		"/ws/MassiveCover/src/mcover/coverage/munit/client/MCoverPrintClient.hx",
		"/ws/MassiveCover/src/mcover/coverage/util/Timer.hx",
		"/ws/MassiveCover/test.hxml",
		"/ws/MacroLogger/src/m/cover/logger/LogClientImpl.hx",
		"/ws/MacroLogger/src/m/cover/logger/client/LogClient.hx",
		"/ws/MacroLogger/src/m/cover/logger/client/LogClientImpl.hx",
		"/ws/MacroLogger/src/m/cover/logger/data/Log.hx",
		"/ws/MacroLogger/src/m/cover/logger/data/LogRecording.hx",
		"/ws/MacroLogger/src/m/cover/logger/macro/LoggerBuildMacro.hx",
		"/ws/MacroLogger/src/m/cover/logger/LogException.hx",
		"/ws/MacroLogger/src/m/cover/logger/Logger.hx",
		"/ws/MacroLogger/src/m/cover/logger/LoggerImpl.hx",
		"/ws/MacroLogger/src/m/cover/macro/PackageHelper.hx",
		"/ws/MacroLogger/src/m/cover/Exception.hx",
		"/ws/MacroLogger/src/MLog.hx",
		"/ws/MacroLogger/src/m/cover/macro/BuildMacro.hx",
		"/ws/MacroLogger/src/m/cover/logger/LogClient.hx",
		"/ws/MacroLogger/src/m/cover/logger/LogRecording.hx",
		"/ws/MacroLogger/src/m/cover/logger/Utils.hx",
		"/ws/MacroLogger/src/m/cover/logger/Log.hx",
		"/ws/MacroLogger/example/src/Main.hx",
		"/ws/MacroLogger/src/mlog/LoggerImpl.hx",
		"/ws/MacroLogger/src/mlog/LogClientImpl.hx",
		"/ws/MacroLogger/src/mlog/Utils.hx",
		"/ws/MacroLogger/src/mlog/Log.hx",
		"/ws/MacroLogger/src/mlog/LogRecording.hx",
		"/ws/MacroLogger/src/mlog/Logger.hx",
		"/ws/MacroLogger/src/mlog/LogClient.hx",
		"/ws/MacroLogger/src/mlog/macro/BuildMacro.hx",
		"/ws/MacroLogger/example/build/index.html",
		"/ws/MassiveCover/src/massive/mcover/macro/LoggingMacroHelper.hx",
		"/ws/MacroLogger/src/mlog/macro/LoggerBuildMacro.hx",
		"/ws/MacroLogger/example/build/example.js",
		"/ws/MassiveCover/src/massive/mcover/macro/CoverClassMacro.hx",
		"/ws/MacroLogger/example/build.hxml",
		"/ws/MassiveCover/src/massive/mcover/macro/MacroUtil.hx",
		"/ws/MacroLogger/example/build/example.n",
		"/ws/MacroLogger/src/mlog/macro/PackageHelper.hx",
		"/ws/MacroLogger/src/mlog/macro/LoggingBuildMacro.hx",
		"/ws/MacroLogger/src/macro/BuildMacro.hx",
		"/ws/MacroLogger/src/macro/PackageHelper.hx",
		"/ws/MacroLogger/src/macro/LoggingBuildMacro.hx",
		"/ws/MacroLogger/src/mlog/LogException.hx",
		"/ws/MacroLogger/src/FunctionLogger.hx",
		"/ws/MassiveCover/src/massive/mcover/util/MathUtil.hx",
		"/ws/MacroLogger/src/mlog/Utils",
		"/ws/MassiveCover/src/massive/mcover/util/Timer.hx",
		"/ws/MacroLogger/build.hxml",
		"/ws/MacroLogger/src/macro/IncludeMacro.hx",
		"/ws/MassiveCover/src/massive/mcover/MCover.hx",
		"/ws/MacroLogger/src/macro/IncludeClassesMacro.hx",
		"/ws/MacroLogger/src/FunctionLogger.hgx",
		"/ws/MassiveCover/src/massive/mcover/munit/client/MCoverPrintClient.hx",
		"/ws/MassiveCover/src/massive/mcover/DataTypes.hx",
		"/ws/MassiveCover/src/massive/mcover/macro/CoverageMacroHelper.hx",
		"/ws/MassiveCover/src/massive/mcover/data/DataTypes.hx",
		"/usr/lib/haxe/lib/macrotools/0,0,5/macrotools/Imports.hx",
		"/usr/lib/haxe/lib/macrotools/0,0,5/macrotools/TypeImports.hx",
		"/ws/MassiveCover/src/massive/mcover/macro/FunctionLogMacro.hx",
		"/ws/MassiveCover/src/massive/mcover/macro/FunctionLoggerUtil.hx",
		"/ws/MassiveCover/src/massive/mcover/macro/Log.hx",
		"/ws/MassiveCover/src/massive/mcover/data/AbstractNode.hx",
		"/ws/MassiveCover/test/TestMain.hx",
		"/ws/MassiveCover/src/massive/mcover/macro/ClassMacroBase.hx",
		"/ws/MassiveCover/src/massive/mcover/macro/CodeCoverageClassMacro.hx",
		"/ws/MassiveCover/src/massive/mcover/CoverageLogger.hx",
		"/ws/MassiveCover/src/massive/mcover/FunctionLogger.hx",
		"/ws/MassiveCover/src/massive/mcover/macro/LoggingClassMacro.hx",
		"/ws/MassiveCover/.mcover-logging",
		"/ws/MassiveCover/src/massive/mcover/data/AbstractNodeList.hx",
		"/ws/MassiveCover/.mcover-debug",
		"/Users/dominic/Desktop/hxml test/src/HelloWorld.hx",
		"/Users/dominic/Desktop/hxml test/bin/Foo.hx",
		"/Users/dominic/Desktop/hxml test/build.hxml",
		"/ws/MassiveCover/test/massive/Foo.hx",
		"/ws/MassiveUnit/core/src/massive/munit/TestResult.hx",
		"/ws/MassiveUnit/core/src/massive/munit/client/PrintClientBase.hx",
		"/ws/MassiveUnit/core/src/massive/munit/client/RichPrintClient.hx",
		"/usr/lib/haxe/lib/macrotools/0,0,5/macrotools/Print.hx",
		"/usr/lib/haxe/lib/macrotools/0,0,5/macrotools/MacroTools.hx",
		"/usr/lib/haxe/lib/macrotools/0,0,5/macrotools/TypeTools.hx",
		"/ws/MassiveCover/test/massive/mcover/CoverageLoggerImplTest.hx",
		"/ws/MassiveUI/raxe/InstallerModule.hx",
		"/ws/MassiveCover/test/massive/mcover/CoverageReportClientMock.hx",
		"/ws/MassiveCover/build/test/.gitignore",
		"/ws/MassiveCover/src/massive/mcover/data/Log.hx",
		"/ws/MassiveUnit/tool/src/massive/munit/command/RunCommand.hx",
		"/ws/MassiveUnit/core/src/massive/munit/client/AbstractTestResultClient.hx",
		"/ws/MassiveUnit/core/src/massive/munit/TestRunner.hx",
		"/ws/MassiveUnit/tool/resource/htmlprintclient.css",
		"/ws/MassiveCover/src/massive/mcover/client/PrintClient.hx",
		"/ws/MassiveUnit/tool/src/massive/munit/Config.hx",
		"/ws/MassiveUnit/tool/src/massive/munit/command/MUnitCommand.hx",
		"/ws/MassiveCover/test/massive/mcover/CoverageLoggerMock.hx",
		"/ws/MassiveUnit/tool/resource/htmlprintclient.js",
		"/ws/MassiveUnit/core/src/massive/munit/ITestResultClient.hx",
		"/ws/MassiveCover/.mlib",
		"/ws/MassiveCover/build/haxedoc.xml",
		"/ws/MassiveCover/src/massive/mcover/client/EMMAPrintClient.hx",
		"/ws/MassiveCover/build/test/js_test.js",
		"/ws/MassiveCover/src/massive/mcover/data/Method.hx",
		"/ws/MassiveCover/example2/src/Main.hx",
		"/ws/MassiveCover/src/massive/mcover/data/untitled",
		"/ws/MassiveCover/src/massive/mcover/data/untitledLog.hx",
		"/ws/MassiveCover/src/massive/mcover/data/DataUtil.hx",
		"/ws/MassiveCover/src/massive/mcover/data/CoverageResult.hx"
	],
	"find":
	{
		"height": 68.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/ws/MassiveCover/src/mcover",
			"/ws/MassiveUI/raxe",
			"/ws/Raxe/raxe",
			"/ws/MassiveTemplate/src",
			"/ws/CiscoVideoscape/src",
			"/ws/MassiveUnit",
			"/ws/MassiveCover",
			"/ws/MassiveUnit",
			"/ws/MassiveUnit/tool/src",
			"/ws/MassiveCover/src/massive",
			"/ws/MassiveUnit/core",
			"/ws/MassiveCover",
			"/ws/MassiveUnit"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"massive.mcover",
			"mlog",
			"mlog.",
			"b",
			"executionTime",
			"duration",
			"entryLogs",
			"MAX_STACK_DEPTH_LIMIT",
			"_parseExpr",
			"debug",
			"functionStack",
			"eVarRef",
			":Pos",
			"formatTime",
			"stamp",
			"MathUtil.round",
			"MLog.inlineStamp",
			"Timer.",
			"parseExpress",
			"parse",
			"isConstructor",
			"parseExpression",
			"exprStack",
			"getFilePackage",
			"classPathHash",
			"ignore",
			"functionLogMacro",
			"FunctionLogMacro",
			"generatedMethods",
			"functionCount",
			"genera",
			"ge",
			"logThrowViaFunction",
			"FunctionLoggerUtil",
			"wrapBlockWithEntryExit",
			"incrementPos",
			"createBaseExpr",
			"parseMethodBlock",
			"ignoreClass",
			"newMethodCount",
			"newMethods",
			"currentMethodFunction",
			"debug(",
			"parseWhile",
			"logCount",
			"debug(",
			"ignoreClass",
			"META_TAG_IGNORE",
			"\n// /**\n// 	* Depricated - generate a local method to log the exit and returns\n// 	* the original return value along with the original return type signature.\n// 	* \n// 	* Not currently used - but keeping incase edge cases with current implementation (return {log();foo})\n// 	*/\n// 	function logReturnValueViaFunction(expr:Expr, e:Expr):Expr\n// 	{\n// 		//a returned value (e.g. return foo;)\n// 		var pos:Position = expr.pos;\n\n// 		var ret:Null<ComplexType> = null;\n// 		switch(functionStack[functionStack.length-1].expr)\n// 		{\n// 			case EFunction(name, f): ret = f.ret;\n// 			default: ret =  currentMethodFunction.ret;\n// 		}\n\n// 		var field = generateCustomLogFunction(ret, pos);\n// 		newMethods.push(field);\n// 		//debug(macrotools.Print.makeWithField(field));\n\n// 		//replace the return with the call to the newly generated method\n// 		var eConst = {\n// 			expr:EConst(CIdent(field.name)),\n// 			pos:pos\n// 		};\n		\n// 		var eCall = {\n// 			expr:ECall(eConst, [e]),\n// 			pos:pos\n// 		}\n\n// 		expr.expr = EReturn(eCall);\n\n// 		return expr;\n\n// 	}\n\n// 	function generateCustomLogFunction(ret:Null<ComplexType>, pos:Position):Field\n// 	{\n// 		//create typed function args - e.g. (value:*, ?pos:haxe.PosInfos)\n\n// 		var fPosInfosType = {\n// 			sub:null,\n// 			params: [],\n// 			pack: [\"haxe\"],\n// 			name: \"PosInfos\"\n// 		}\n\n// 		var fArgs = [\n// 			{\n// 				value:null,\n// 				type:ret,\n// 				opt:false,\n// 				name:\"value\"\n// 			},\n// 			{\n// 				value:null,\n// 				type:TPath(fPosInfosType),\n// 				opt:true,\n// 				name:\"pos\"\n// 			}\n// 		];\n\n// 		var fParams = [];\n\n\n// 		//create function body\n// 		//i.e. {fOut();return value;}\n\n// 		var exprs:Array<Expr> = [];\n\n// 		var ePosInfos = {expr:EConst(CIdent(\"pos\")), pos:pos};\n\n// 		var eLog = createFunctionLogExpr(pos, \"logExit\", ePosInfos);\n// 		exprs.push(eLog);\n\n\n// 		var eRef = {expr:EConst(CIdent(\"value\")), pos:pos};\n\n// 		var eEReturn = {\n// 			expr:EReturn(eRef),\n// 			pos:pos\n// 		};\n// 		exprs.push(eEReturn);\n\n// 		var fExpr = {\n// 			expr:EBlock(exprs),\n// 			pos:pos\n// 		};\n\n// 		//create function definition\n\n// 		var fFun = {\n// 			ret:ret,\n// 			params:fParams,\n// 			expr:fExpr,\n// 			args:fArgs\n// 		}\n\n// 		//create new class field method\n// 		//i.e. _____mcoverX = function(value:*,?pos:haxe.PosInfos):*{fOut();return value;}\n\n// 		var field = {\n// 			pos:pos,\n// 			name:\"____mcover\" + newMethodCount++,\n// 			meta: [],\n// 			kind: FFun(fFun),\n// 			doc:null,\n// 			access:[AStatic, APrivate]\n// 		}\n		\n// 		return field;\n// 	}",
			"func",
			"EA",
			"getComplexType",
			"debug",
			"exprStack",
			"functionStack",
			"neko",
			"completionHandler",
			"launchNeko",
			"();",
			"createLogExpr",
			"Void",
			"trace",
			"mIn",
			"mOut",
			"globalLogDepth",
			"allMethodLogs",
			"logDepth",
			"methodLogs",
			"! ",
			"PrintClient#ser",
			"parseEReturn",
			"createLogExpr",
			"parseExpressions",
			"cast",
			"emptyResult",
			"currentMethodE",
			"/ws/MassiveCover/src/massive/mcover/macro/CoverClassMacro",
			"#",
			"#if",
			"debugL",
			"methodLogs",
			"methodCallStackDepth",
			"methods",
			"currentClassName",
			"20",
			"@AsyncTest\n	// public function shouldAsyncTimeout(factory:AsyncFactory):Void\n	// {\n	// 	var handler:Dynamic = factory.createHandler(this, asyncHandler, 100);\n	// 	//Timer.delay(handler, 500); //not necessary, however is bug where this handler called first on flash targets\n	// }\n\n	// @AsyncTest\n	// public function shouldAllowSyncAssertInsideAsyncTest(factory:AsyncFactory):Void\n	// {\n	// 	var handler:Dynamic = factory.createHandler(this, asyncHandler, 100);\n	// 	Assert.isTrue(true);\n	// 	Timer.delay(handler, 1);\n	// }\n\n	// @AsyncTest\n	// public function shouldCancelAsyncIfExceptionThrown(factory:AsyncFactory):Void\n	// {\n	// 	var handler:Dynamic = factory.createHandler(this, asyncHandler, 100);\n	// 	Timer.delay(handler, 1);\n	// 	throw \"exception in async test\";\n	// }\n\n	// @AsyncTest\n	// public function shouldCancelAsyncIfSyncAssertFailsAfterHandlerCreated(factory:AsyncFactory):Void\n	// {\n	// 	var handler:Dynamic = factory.createHandler(this, asyncHandler, 100);\n	// 	Assert.fail(\"failed assert in async test\");\n	// 	Timer.delay(handler, 1);\n	// }\n\n	// @AsyncTest\n	// public function shouldCancelAsyncIfSyncAssertFailsAfterTimerCreated(factory:AsyncFactory):Void\n	// {\n	// 	var handler:Dynamic = factory.createHandler(this, asyncHandler, 100);\n	// 	Timer.delay(handler, 1);\n	// 	Assert.fail(\"failed assert in async test\");\n	// }\n\n	// @AsyncTest\n	// public function shouldCancelAsyncIfSyncAssertFailsBeforeHandlerCreated(factory:AsyncFactory):Void\n	// {\n	// 	Assert.fail(\"failed assert in async test\");\n	// 	var handler:Dynamic = factory.createHandler(this, asyncHandler, 100);\n	// 	Timer.delay(handler, 1);\n		\n	// }",
			"onExampleTestTwo",
			"asyncDelegateTestHanlder",
			"addComponent",
			"if",
			"copyResources",
			"InstallerModule",
			"TaskSignal",
			"OverlayChanged",
			"ApplicationEvent",
			"import template.screen.RegisterScreens;",
			"NetworkPause",
			"TaskSignal",
			"updateProgress",
			"CoverageLevel",
			"assertNodeNameAtt",
			"assertNodeAtt",
			"arr",
			"unty",
			"hasNekoTests",
			"TargetType",
			"TargetTy",
			"validateDirectory",
			"error",
			"mcoverLogger",
			"overallPercentage",
			"output",
			"logger",
			"mmcoverClient",
			"coverClient",
			"currentResults",
			"externalJS",
			"execute",
			"execute(",
			"ExternalJS",
			"externalJS.queue",
			"EXT_",
			"newline",
			"divider",
			"ExternalJS.",
			"htmlOutput",
			"ExternalJSHelper",
			"EXTERNAL_"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"mcover.coverage",
			"m.cover.logger",
			"m.cover.logger.",
			"internalDuration",
			"totalDuration",
			"logsById",
			"parse",
			"eReturnValue",
			"Utils.formatTime",
			"Utils.round",
			"Utils.inlineStamp",
			"MLog.",
			"parseExpr",
			"exclusions",
			"loggingHelper",
			"LoggingMacroHelper",
			"generatedFields",
			"generatedMethodCount",
			"functionLogMacro",
			"wrapBlock",
			"MacroUtil.incrementPos",
			"MacroUtil.createMCoverMethodCall",
			"generatedMethodCount",
			"generatedMethods",
			"Log.log(",
			"count",
			"ignoreClassCoverage",
			"META_TAG_IGNORE_COVER",
			"functionStack",
			"createFunctionLogExpr",
			"fIn",
			"fOut",
			"globalFunctionLogDepth",
			"globalFunctionLogs",
			"globalLogDepth",
			"allMethodLogs",
			"CoverClassMacro",
			"allLogs",
			"logDepth",
			"asyncHandler",
			"asyncDelegateTestHandler",
			"progress",
			"EmmaCoverageLevel",
			"assertNodeNameAttribute",
			"assertNodeAttribute",
			"assertNodeAttributeValue",
			"stack",
			"mcoverLogger",
			"mcoverClient",
			"currentClassResults",
			"external",
			"queue",
			"ExternalPrintClientJS",
			"externalJS.execute",
			"ExternalJS.",
			"EXT_",
			"ExternalJS",
			"ExternalJSHelper.",
			"externalJS",
			"helper.queue",
			"queue",
			"EXTERNAL_SET_RESULT",
			"EXTERNAL_PRINT",
			"EXTERNAL_PRINT_LINE",
			"queue",
			"addToJavaScriptQueue",
			"helper",
			"testClassStatus",
			"completeLastTestResult",
			"createNewTestClass",
			"TestClassResultStatus",
			"updateTestClassStatus",
			"printTestResult",
			"printToTestSummary",
			"helperRich.addTestResult",
			"munitClient",
			"isRichClient",
			"helperRich",
			"isRichClient",
			"",
			"qualifiedClassName",
			"qualifiedTestName",
			"isRichClient",
			"assertContainsString",
			"assertPropertyIsIncludedInOutput",
			"overallPercentage",
			"includeExecutionFrequency",
			"serializeFinalResult",
			"serializeSummary",
			"serializePackageResults",
			"serializeClassResults",
			"serializeMissingBlocks",
			"serializeBlockFrequency",
			"serializeHeader",
			"printLine",
			"printTabs",
			"divider",
			"helper",
			"ignoredCoun",
			"ignoredCount",
			"errorCount",
			"failureCount",
			"helper",
			"PrintClientHelper",
			"currentParentId",
			"TestResultState",
			"addTest",
			"",
			"coverage",
			"Coverage",
			"allBranchResultsById",
			"allStatementResultsById",
			"logger",
			"CoverageLogger",
			"logger",
			"instance",
			"CoverageReportClient",
			"Exception",
			"createReporter",
			"reporter",
			"CoverageReporter",
			"branchMissing",
			"statementMissing",
			"branchFrequency",
			"statementFrequency",
			"copyBranchResult",
			"maxLogsToParsePerTick",
			"Timer.stamp"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		},
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.636521277146,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true
}
