package m.cover.logger;

import haxe.PosInfos;
import m.cover.logger.client.LogClient;
import m.cover.logger.data.Log;
import m.cover.logger.data.LogRecording;

/**
* Logger esponsible for capturing and reporting entry/exit times for functions.
* By default all function entry and exits are logged, however a subset can be explicitly 'recorded'
* 
* Basic usage:
* 
* 		var output:String = MLog.getLogger().report();
*
* To capture a specific subset:
*
*		logger.startRecording()  
*		doSomething();
*		logger.stopRecording();
*		var recording = logger.getCurrentRecording();
*		
*		var output:String = logger.report(recording);
*/

interface Logger
{
	/**
	Handler which if present, should be called when the client has completed its processing of the results.
	 */
	var completionHandler(default, default):Logger -> Void;

	/**
	flag to indicate if a recording is active
	*/
	var isRecording(default, null):Bool;

	/**
	Creates an empty recording from the current state of the logger
	Resets any existing recording
	*/
	function startRecording():Void;

	/**
	Stops recording and generates a LogRecording with the current stop time
	*/
	function stopRecording():Void;


	/**
	Returns the current recording (or null)
	
	@return the current logRecording
	*/
	function getRecording():LogRecording;


	/**
	Returns the current recording (or null)
	
	@param recording 		an optional recording (generates one from current data if none specified)
	*/
	function report(?recording:LogRecording=null):Void;


	/**
	Adds a client to report on logs
	
	@param client 	the log client to add
	*/
	function addClient(client:LogClient):Void;

	/**
	Removes a client from reporting on logs
	
	@param client 	the log client to remove
	*/
	function removeClient(client:LogClient):Void;


	/**
	Logs a function entry point
	Calls to this method is generated by macros. Developers should not call directly.
	
	@param isInlineFunction 	boolean flag indicating if method being logged is not a class method
	@param pos 		auto generated posInfos for reporting
	*/
	function logEntry(?isInlineFunction:Bool=false, ?pos:PosInfos):Int;
	
	/**
	Logs a function exit point
	Calls to this method is generated by macros. Developers should not call directly.
	
	@param entryId 	reference to the entry log for the current method
	@param pos 		auto generated posInfos for reporting
	*/
	function logExit(entryId:Int, ?pos:PosInfos):Void;
}




